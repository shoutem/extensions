diff --git a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicEvents.kt b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicEvents.kt
index 9a2ee90..851af89 100644
--- a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicEvents.kt
+++ b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicEvents.kt
@@ -51,6 +51,7 @@ class MusicEvents(private val reactContext: ReactContext) : BroadcastReceiver()
         const val METADATA_TIMED_RECEIVED = "metadata-timed-received"
         const val METADATA_COMMON_RECEIVED = "metadata-common-received"
         const val METADATA_PAYLOAD_KEY = "metadata"
+        const val NOW_PLAYING_METADATA_CHANGED = "now-playing-metadata-changed"
 
         // Other
         const val PLAYER_ERROR = "player-error"
diff --git a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
index b2409a0..5240ef8 100644
--- a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
+++ b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/module/MusicModule.kt
@@ -371,9 +371,17 @@ class MusicModule(reactContext: ReactApplicationContext) : ReactContextBaseJavaM
             callback.reject("no_current_item", "There is no current item in the player")
 
         musicService.clearNotificationMetadata()
+        musicService.updateNowPlayingMetadata(bundleToTrack(Bundle()))
         callback.resolve(null)
     }
 
+    @ReactMethod
+    fun getNowPlayingMetadata(callback: Promise) = scope.launch {
+        if (verifyServiceBoundOrReject(callback)) return@launch
+
+        callback.resolve(Arguments.fromBundle(musicService.getNowPlayingMetadata()))
+    }
+
     @ReactMethod
     fun removeUpcomingTracks(callback: Promise) = scope.launch {
         if (verifyServiceBoundOrReject(callback)) return@launch
diff --git a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/service/MusicService.kt b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/service/MusicService.kt
index 9d6d869..a400b26 100644
--- a/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/service/MusicService.kt
+++ b/node_modules/react-native-track-player/android/src/main/java/com/doublesymmetry/trackplayer/service/MusicService.kt
@@ -46,6 +46,7 @@ class MusicService : HeadlessJsTaskService() {
     private val binder = MusicBinder()
     private val scope = MainScope()
     private var progressUpdateJob: Job? = null
+    private var nowPlayingMetadata: Bundle? = Bundle()
 
     /**
      * Use [appKilledPlaybackBehavior] instead.
@@ -434,6 +435,13 @@ class MusicService : HeadlessJsTaskService() {
     @MainThread
     fun updateNowPlayingMetadata(track: Track) {
         player.notificationManager.overrideMetadata(track.toAudioItem())
+
+        nowPlayingMetadata = track.originalItem
+
+        val eventPayload = Bundle()
+        eventPayload.putBundle("metadata", nowPlayingMetadata!!.clone() as Bundle)
+
+        emit(MusicEvents.NOW_PLAYING_METADATA_CHANGED, eventPayload);
     }
 
     @MainThread
@@ -441,6 +449,11 @@ class MusicService : HeadlessJsTaskService() {
         player.notificationManager.hideNotification()
     }
 
+    @MainThread
+    fun getNowPlayingMetadata(): Bundle {
+        return nowPlayingMetadata ?: Bundle()
+    }
+
     private fun emitPlaybackTrackChangedEvents(
         index: Int?,
         previousIndex: Int?,
diff --git a/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayer.swift b/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayer.swift
index 32df9a5..9ee835e 100644
--- a/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayer.swift
+++ b/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayer.swift
@@ -26,6 +26,7 @@ public class RNTrackPlayer: RCTEventEmitter, AudioSessionControllerDelegate {
     private var sessionCategoryMode: AVAudioSession.Mode = .default
     private var sessionCategoryPolicy: AVAudioSession.RouteSharingPolicy = .default
     private var sessionCategoryOptions: AVAudioSession.CategoryOptions = []
+    private var nowPlayingMetadata: [String: Any] = [:]
 
     // MARK: - Lifecycle Methods
 
@@ -754,6 +755,11 @@ public class RNTrackPlayer: RCTEventEmitter, AudioSessionControllerDelegate {
 
         player.nowPlayingInfoController.clear()
         resolve(NSNull())
+
+        nowPlayingMetadata = [:]
+        emit(event: EventType.NowPlayingMetadataChanged, body: [
+                "metadata": [:],
+            ] as [String : Any])
     }
 
     @objc(updateNowPlayingMetadata:resolver:rejecter:)
@@ -761,9 +767,22 @@ public class RNTrackPlayer: RCTEventEmitter, AudioSessionControllerDelegate {
         if (rejectWhenNotInitialized(reject: reject)) { return }
 
         Metadata.update(for: player, with: metadata)
+
+        nowPlayingMetadata = metadata
+        emit(event: EventType.NowPlayingMetadataChanged, body: [
+                "metadata": metadata,
+            ] as [String : Any])
+
         resolve(NSNull())
     }
 
+    @objc(getNowPlayingMetadata:rejecter:)
+    public func getNowPlayingMetadata(resolve: RCTPromiseResolveBlock, reject: RCTPromiseRejectBlock) {
+        if (rejectWhenNotInitialized(reject: reject)) { return }
+
+        resolve((nowPlayingMetadata))
+    }
+
     private func getPlaybackStateErrorKeyValues() -> Dictionary<String, Any> {
         switch player.playbackError {
             case .failedToLoadKeyValue: return [
diff --git a/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayerBridge.m b/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayerBridge.m
index 7741994..a6e3e0b 100644
--- a/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayerBridge.m
+++ b/node_modules/react-native-track-player/ios/RNTrackPlayer/RNTrackPlayerBridge.m
@@ -164,4 +164,7 @@ @interface RCT_EXTERN_REMAP_MODULE(TrackPlayerModule, RNTrackPlayer, NSObject)
 RCT_EXTERN_METHOD(clearSleepTimer:(RCTPromiseResolveBlock)resolve
               rejecter:(RCTPromiseRejectBlock)reject);
 
+RCT_EXTERN_METHOD(getNowPlayingMetadata:(RCTPromiseResolveBlock)resolve
+                  rejecter:(RCTPromiseRejectBlock)reject);
+
 @end
diff --git a/node_modules/react-native-track-player/ios/RNTrackPlayer/Utils/EventType.swift b/node_modules/react-native-track-player/ios/RNTrackPlayer/Utils/EventType.swift
index 6226222..f8273e6 100644
--- a/node_modules/react-native-track-player/ios/RNTrackPlayer/Utils/EventType.swift
+++ b/node_modules/react-native-track-player/ios/RNTrackPlayer/Utils/EventType.swift
@@ -26,6 +26,7 @@ enum EventType: String, CaseIterable {
     case MetadataChapterReceived = "metadata-chapter-received"
     case MetadataTimedReceived = "metadata-timed-received"
     case MetadataCommonReceived = "metadata-common-received"
+    case NowPlayingMetadataChanged = "now-playing-metadata-changed"
     
     static func allRawValues() -> [String] {
         return allCases.map { $0.rawValue }
diff --git a/node_modules/react-native-track-player/src/constants/Event.ts b/node_modules/react-native-track-player/src/constants/Event.ts
index 0914946..b072036 100644
--- a/node_modules/react-native-track-player/src/constants/Event.ts
+++ b/node_modules/react-native-track-player/src/constants/Event.ts
@@ -131,4 +131,8 @@ export enum Event {
    * See https://rntp.dev/docs/api/events#commonmetadatareceived
    **/
   MetadataCommonReceived = 'metadata-common-received',
+  /**
+   * Fired when metadata of active track has changed.
+   **/
+   NowPlayingMetadataChanged = 'now-playing-metadata-changed',
 }
diff --git a/node_modules/react-native-track-player/src/hooks/index.ts b/node_modules/react-native-track-player/src/hooks/index.ts
index c914e68..1140419 100644
--- a/node_modules/react-native-track-player/src/hooks/index.ts
+++ b/node_modules/react-native-track-player/src/hooks/index.ts
@@ -4,3 +4,4 @@ export * from './usePlayWhenReady';
 export * from './usePlaybackState';
 export * from './useProgress';
 export * from './useTrackPlayerEvents';
+export * from './useNowPlayingMetadata';
diff --git a/node_modules/react-native-track-player/src/hooks/useNowPlayingMetadata.ts b/node_modules/react-native-track-player/src/hooks/useNowPlayingMetadata.ts
new file mode 100644
index 0000000..2de1058
--- /dev/null
+++ b/node_modules/react-native-track-player/src/hooks/useNowPlayingMetadata.ts
@@ -0,0 +1,34 @@
+import { useEffect, useState } from 'react';
+import { Event } from '../constants';
+import { useTrackPlayerEvents } from './useTrackPlayerEvents';
+import { NowPlayingMetadata } from '../interfaces';
+import TrackPlayer from '..';
+
+export const useNowPlayingMetadata = (): NowPlayingMetadata | undefined => {
+  const [metadata, setMetadata] = useState<NowPlayingMetadata | undefined>();
+
+  useEffect(() => {
+    let unmounted = false;
+
+    if (unmounted) return;
+
+    TrackPlayer.getNowPlayingMetadata()
+    .then(setMetadata)
+      .catch(() => {
+        /** Only throws while you haven't yet setup, ignore failure. */
+      });
+
+      return () => {
+        unmounted = true;
+      };
+  }, [])
+
+  useTrackPlayerEvents(
+    [Event.NowPlayingMetadataChanged],
+    async (event) => {
+      setMetadata(event.metadata);
+    }
+  );
+
+  return metadata;
+};
diff --git a/node_modules/react-native-track-player/src/interfaces/events/EventPayloadByEvent.ts b/node_modules/react-native-track-player/src/interfaces/events/EventPayloadByEvent.ts
index a9d1192..a16bf59 100644
--- a/node_modules/react-native-track-player/src/interfaces/events/EventPayloadByEvent.ts
+++ b/node_modules/react-native-track-player/src/interfaces/events/EventPayloadByEvent.ts
@@ -19,6 +19,7 @@ import type { RemotePlaySearchEvent } from './RemotePlaySearchEvent';
 import type { RemoteSeekEvent } from './RemoteSeekEvent';
 import type { RemoteSetRatingEvent } from './RemoteSetRatingEvent';
 import type { RemoteSkipEvent } from './RemoteSkipEvent';
+import type { NowPlayingMetadataChangedEvent } from './NowPlayingMetadataChangedEvent';
 
 export type EventPayloadByEvent = {
   [Event.PlayerError]: PlayerErrorEvent;
@@ -49,6 +50,7 @@ export type EventPayloadByEvent = {
   [Event.MetadataChapterReceived]: AudioMetadataReceivedEvent;
   [Event.MetadataTimedReceived]: AudioMetadataReceivedEvent;
   [Event.MetadataCommonReceived]: AudioCommonMetadataReceivedEvent;
+  [Event.NowPlayingMetadataChanged]: NowPlayingMetadataChangedEvent;
 };
 
 // eslint-disable-next-line
diff --git a/node_modules/react-native-track-player/src/interfaces/events/NowPlayingMetadataChangedEvent.ts b/node_modules/react-native-track-player/src/interfaces/events/NowPlayingMetadataChangedEvent.ts
new file mode 100644
index 0000000..183fc95
--- /dev/null
+++ b/node_modules/react-native-track-player/src/interfaces/events/NowPlayingMetadataChangedEvent.ts
@@ -0,0 +1,5 @@
+import type { NowPlayingMetadata } from "../NowPlayingMetadata";
+
+export interface NowPlayingMetadataChangedEvent {
+  metadata: NowPlayingMetadata;
+}
diff --git a/node_modules/react-native-track-player/src/interfaces/events/index.ts b/node_modules/react-native-track-player/src/interfaces/events/index.ts
index 92b5df2..c4421ca 100644
--- a/node_modules/react-native-track-player/src/interfaces/events/index.ts
+++ b/node_modules/react-native-track-player/src/interfaces/events/index.ts
@@ -14,3 +14,4 @@ export * from './RemotePlaySearchEvent';
 export * from './RemoteSeekEvent';
 export * from './RemoteSetRatingEvent';
 export * from './RemoteSkipEvent';
+export * from './NowPlayingMetadataChangedEvent';
diff --git a/node_modules/react-native-track-player/src/trackPlayer.ts b/node_modules/react-native-track-player/src/trackPlayer.ts
index 4af7b18..6b0ada4 100644
--- a/node_modules/react-native-track-player/src/trackPlayer.ts
+++ b/node_modules/react-native-track-player/src/trackPlayer.ts
@@ -281,6 +281,13 @@ export function updateNowPlayingMetadata(
   });
 }
 
+/**
+ * Gets the metadata content of the notification (Android) and the Now Playing Center (iOS).
+ */
+export async function getNowPlayingMetadata(): Promise<NowPlayingMetadata | undefined> {
+  return (await TrackPlayer.getNowPlayingMetadata()) ?? undefined;
+}
+
 // MARK: - Player API
 
 /**
